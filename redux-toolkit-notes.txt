https://github.com/christofferberg/react-redux-toolkit-example

https://react-redux-toolkit-example.now.sh/sign-in

https://github.com/christofferberg/react-redux-toolkit-example

https://dev.to/vcapretz/writing-modern-redux-in-2020-the-powerful-createslice-1i5m

https://stackoverflow.com/questions/60316251/how-to-use-redux-thunk-with-redux-toolkits-createslice

---------------------------------------------------------------------------------------------------------

Redux Toolkit has a configureStore() function that wraps createStore()

---------------------------------------------------------------------------------------------------------

https://redux-starter-kit.js.org/tutorials/basic-tutorial

createAction
// Or, use `createAction` to generate the action creator:
const incrementNew = createAction('INCREMENT')

console.log(incrementNew())
// {type: "INCREMENT"}


---------------------------------------------------------------------------------------------------------
createSlice


const counterSlice = createSlice({
  name: 'counter',
  initialState: 0,
  reducers: {
    increment: state => state + 1,
    decrement: state => state - 1
  }
})

const store = configureStore({
  reducer: counterSlice.reducer
})

document.getElementById('increment').addEventListener('click', () => {
  store.dispatch(counterSlice.actions.increment())
})


const { actions, reducer } = counterSlice
const { increment, decrement } = actions


createSlice combines the actions and reducer

---------------------------------------------------------------------------------------------------------
configureStore
configureStore This will automatically set up the Redux DevTools Extension for us.

createSlice function allows us to consolidate that logic in one place.

createSlice uses createReducer and createAction internally,
so in most apps, you won't need to use them yourself - createSlice is all you need.

---------------------------------------------------------------------------------------------------------




We could replace those using RTK's createReducer and createAction functions. However,
the RTK createSlice function allows us to consolidate that logic in one place.

---------------------------------------------------------------------------------------------------------

js object is state of redux,
it will call combineReducers


import { createSlice } from '@reduxjs/toolkit'

const todosSlice = createSlice({
  name: 'todos',
  initialState: [],
  reducers: {
    addTodo(state, action) {
      const { id, text } = action.payload
      state.push({ id, text, completed: false })
    },
    toggleTodo(state, action) {
      const todo = state.find(todo => todo.id === action.payload)
      if (todo) {
        todo.completed = !todo.completed
      }
    }
  }
})

export const { addTodo, toggleTodo } = todosSlice.actions

export default todosSlice.reducer

createSlice Options#

createSlice takes an options object as its argument, with these options:

name: a string that is used as the prefix for generated action types

initialState: the initial state value for the reducer

reducers: an object, where the keys will become action type strings,
and the functions are reducers that will be run when that action type is dispatched.
(These are sometimes referred to as "case reducers", because they're similar to a case in a switch statement)

---------------------------------------------------------------------------------------------------------

https://javascript.info/optional-chaining

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining

console.log(adventurer?.sd || 'hiii');

https://stackoverflow.com/a/59423268/3882241
---------------------------------------------------------------------------------------------------------

ADD_TODO === 'todos/addTodo'

'todos/addTodo' -> todos is name of the createSlice, addTodo is reducers object one of the key

----------------------------------------------------------------------

tomorrow start from below links


https://redux-starter-kit.js.org/tutorials/intermediate-tutorial#optimizing-todo-filtering